{"version":3,"sources":["Form.js","Category.js","Products.js","Table.js","App.js","serviceWorker.js","index.js"],"names":["Form","onChangeHandler","e","props","onCheckedHandler","type","className","placeholder","value","this","filterText","onChange","id","checked","isStockOnly","htmlFor","React","Component","Category","key","category","colSpan","Product","productName","product","stocked","name","style","color","price","Table","rows","lastCategory","products","forEach","element","index","indexOf","push","App","setState","target","state","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a25ce79.chunk.js","sourcesContent":["import React from 'react';\r\nclass Form extends React.Component{\r\n    onChangeHandler=(e)=>{\r\n        this.props.onChangeHandler(e);\r\n    }\r\n    onCheckedHandler=(e)=>{\r\n        this.props.onCheckedHandler(e)\r\n    }\r\n    render(){\r\n        return(\r\n            <form>\r\n                <input type=\"text\" \r\n                    className=\"form-control\" \r\n                    placeholder=\"Search\" \r\n                    value={this.props.filterText}\r\n                    onChange={this.onChangeHandler}\r\n                />\r\n                <div className=\"form-group form-check\">\r\n                    <input \r\n                        type=\"checkbox\" \r\n                        className=\"form-check-input\" \r\n                        id=\"checkbox\"\r\n                        checked={this.props.isStockOnly}\r\n                        onChange={this.onCheckedHandler} \r\n                    />\r\n                    <label className=\"form-check-label\" htmlFor=\"checkbox\">Only show products on stocks</label>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\nexport default Form;","import React from 'react';\r\nclass Category extends React.Component{\r\n    render(){\r\n        //console.log(this.props.key)\r\n        return(\r\n            <tr key={this.props.category}>\r\n                <th colSpan=\"2\">{this.props.category}</th>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\nexport default Category;","import React from 'react';\r\nclass Product extends React.Component{\r\n    render(){\r\n        //const key=this.props.key;\r\n        //console.log(key);\r\n        const productName=this.props.product.stocked ? \r\n            this.props.product.name : \r\n            <span style={{color:\"red\"}}> {this.props.product.name}</span>\r\n        return(\r\n            <tr key={this.props.product.name}>\r\n                <th>{productName}</th>\r\n                <th>{this.props.product.price}</th>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\nexport default Product;","import React from 'react';\r\nimport Category from './Category';\r\nimport Product from './Products';\r\nclass Table extends React.Component{\r\n    render(){\r\n        \r\n        const rows=[];\r\n        let lastCategory=null;\r\n        this.props.products.forEach((element,index) => {\r\n            if(element.name.indexOf(this.props.filterText)!==-1){\r\n                if(!this.props.isStockOnly){\r\n                    if(element.category!==lastCategory){\r\n                        rows.push(\r\n                            <Category category={element.category} key={index}/>\r\n                        );\r\n                    }\r\n                    rows.push(\r\n                        <Product product={element} key={element.name}/>\r\n                    );\r\n                    \r\n                }else{\r\n                    if(element.stocked){\r\n                        if(element.category!==lastCategory){\r\n                            rows.push(\r\n                                <Category category={element.category} key={index} />\r\n                            );\r\n                        }\r\n                        rows.push(\r\n                            <Product product={element} key={element.name}/>\r\n                        );\r\n                        \r\n                    }\r\n                }\r\n            }\r\n            lastCategory=element.category \r\n        });\r\n        return(\r\n            <table className=\"table\">\r\n                <thead className=\"thead-dark\">\r\n                    <tr>\r\n                        <th>Product</th>\r\n                        <th>price</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {rows}\r\n                </tbody>\r\n            </table>\r\n            \r\n        );\r\n    }\r\n}\r\nexport default Table;","import React from 'react';\nimport Form from './Form';\nimport Table from './Table';\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      filterText:\"\",\n      isStockOnly:false\n\n    }\n  }\n  onChangeHandler=(e)=>{\n    this.setState({\n      filterText:e.target.value\n    });\n  }\n  onCheckedHandler=(e)=>{\n    \n    this.setState({\n      isStockOnly:e.target.checked\n    });\n  }\n  render(){\n    const products=[\n                    {category: \"Sporting Goods\", price: \"$49.99\", stocked: true, name: \"Football\"},\n                    {category: \"Sporting Goods\", price: \"$9.99\", stocked: true, name: \"Baseball\"},\n                    {category: \"Sporting Goods\", price: \"$29.99\", stocked: false, name: \"Basketball\"},\n                    {category: \"Electronics\", price: \"$99.99\", stocked: true, name: \"iPod Touch\"},\n                    {category: \"Electronics\", price: \"$399.99\", stocked: false, name: \"iPhone 5\"},\n                    {category: \"Electronics\", price: \"$199.99\", stocked: true, name: \"Nexus 7\"}\n                  ];\n    return(\n      <div className=\"container\">\n        <Form \n          filterText={this.state.filterText} \n          onChangeHandler={this.onChangeHandler} \n          isStockOnly={this.state.isStockOnly}\n          onCheckedHandler={this.onCheckedHandler}\n        />\n        <Table \n          products={products} \n          filterText={this.state.filterText}\n          isStockOnly={this.state.isStockOnly}\n        />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}